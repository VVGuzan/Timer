package guztimer2;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import javax.swing.*;
import java.awt.event.*;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Владимир Гузанов
 */
public class GuzTimer2 extends javax.swing.JFrame {

    /**
     * Creates new form GuzTimer1
     */
    public GuzTimer2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jSpinner1 = new javax.swing.JSpinner();
        jFormattedTextField3 = new javax.swing.JFormattedTextField();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jProgressBar2 = new javax.swing.JProgressBar();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jSpinner3 = new javax.swing.JSpinner();
        jSpinner4 = new javax.swing.JSpinner();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jFormattedTextField1.setText("0");
        jFormattedTextField1.setPreferredSize(new java.awt.Dimension(36, 30));

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        jSpinner1.setMinimumSize(new java.awt.Dimension(40, 20));
        jSpinner1.setPreferredSize(new java.awt.Dimension(45, 30));

        jFormattedTextField3.setText("0");
        jFormattedTextField3.setPreferredSize(new java.awt.Dimension(36, 30));

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        jSpinner2.setPreferredSize(new java.awt.Dimension(45, 30));

        jLabel2.setText("h");

        jLabel3.setText("m");

        jLabel4.setText("sec");

        jLabel5.setText("h");

        jLabel6.setText("m");

        jLabel7.setText("sec");

        jToggleButton1.setText("Good");
        jToggleButton1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButton1ItemStateChanged(evt);
            }
        });

        jToggleButton2.setText("Rest");
        jToggleButton2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButton2ItemStateChanged(evt);
            }
        });

        jSpinner3.setModel(new javax.swing.SpinnerNumberModel(5, 0, 60, 1));
        jSpinner3.setMinimumSize(new java.awt.Dimension(40, 20));
        jSpinner3.setPreferredSize(new java.awt.Dimension(45, 30));

        jSpinner4.setModel(new javax.swing.SpinnerNumberModel(5, 0, 60, 1));
        jSpinner4.setPreferredSize(new java.awt.Dimension(45, 30));

        jMenu2.setText("Настройки");

        jMenuItem1.setText("Названия таймеров по умолчанию");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem2.setText("Имя левого таймера");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Имя правого таймера");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem7.setText("Сохранить имена и время таймеров");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setText("Загрузить сохраненные данные");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuBar1.add(jMenu2);

        jMenu1.setText("Время таймеров");

        jMenuItem4.setText("30 / 30 мин");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("45 / 15 мин");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setText("10 / 10 мин");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(29, 29, 29))
                                    .addComponent(jSpinner1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jFormattedTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(21, 21, 21))
                                    .addComponent(jSpinner2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jToggleButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jFormattedTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(jToggleButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void jToggleButton1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jToggleButton1ItemStateChanged
        // TODO add your handling code here:
        //jLabel1.setText(Double.toString(Math.floorMod(17, 5))); //остаток от деления =2
        //jLabel8.setText(Double.toString(Math.floorDiv(17, 5))); //целая часть от деления =3
        //jLabel1.setText(Integer.toString(getMsTime(jFormattedTextField1, jSpinner3, jSpinner1)));
        //setMsTime(jFormattedTextField1, jSpinner3, jSpinner1,getMsTime(jFormattedTextField1, jSpinner3, jSpinner1) - 2000 );
        if (jToggleButton1.isSelected()){
            jToggleButton2.setSelected(false);
            chosenButton = 1;
            msStartTime = System.currentTimeMillis();
            //msDeltaT = getMsTime(jFormattedTextField1, jSpinner3, jSpinner1);
            msDeltaT = getTimerMsTime(1);
            //setMsTime(jFormattedTextField1, jSpinner3, jSpinner1,(int) msDeltaT);
            setTimerMsTime(1,(int) msDeltaT);
            gTimer.start();
        }
        else{
            gTimer.stop();
            chosenButton = 0;
        }
    }//GEN-LAST:event_jToggleButton1ItemStateChanged

    private void jToggleButton2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jToggleButton2ItemStateChanged
        // TODO add your handling code here:
        if (jToggleButton2.isSelected()){
            jToggleButton1.setSelected(false);
            chosenButton = 2;
            msStartTime = System.currentTimeMillis();
            //msDeltaT = getMsTime(jFormattedTextField3, jSpinner4, jSpinner2);
            msDeltaT = getTimerMsTime(2);
            //setMsTime(jFormattedTextField3, jSpinner4, jSpinner2,(int) msDeltaT);
            setTimerMsTime(2,(int) msDeltaT);
            gTimer.start();
        }
        else{
            gTimer.stop();
            chosenButton = 0;
        }
    }//GEN-LAST:event_jToggleButton2ItemStateChanged

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        setTimerMsTime(1,30*60*1000);
        setTimerMsTime(2,30*60*1000);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        setTimerMsTime(1,45*60*1000);
        setTimerMsTime(2,15*60*1000);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        setTimerMsTime(1,10*60*1000);
        setTimerMsTime(2,10*60*1000);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        jToggleButton1.setText("Good");
        jToggleButton2.setText("Rest");
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        jToggleButton1.setText((String) JOptionPane.showInputDialog(this, "Переименовать левый таймер на...", "Изменение имени левого таймера", JOptionPane.QUESTION_MESSAGE, null, null, jToggleButton1.getText()));
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        jToggleButton2.setText((String) JOptionPane.showInputDialog(this, "Переименовать правый таймер на...", "Изменение имени правого таймера", JOptionPane.QUESTION_MESSAGE, null, null, jToggleButton2.getText()));
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        saveData(1);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        readData(1);
        initializeData();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        saveData(0);
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        readData(0);
        initializeData();
    }//GEN-LAST:event_formWindowOpened

    
    
    private int getMsTime(JFormattedTextField jHours, JSpinner jMinuts, JSpinner jSeconds ){
        return 1000*(Integer.parseInt(jHours.getText())*60*60 + ((int) jMinuts.getValue())*60 + ((int) jSeconds.getValue()));
    }
    private int getTimerMsTime(int timerN){
        int result = 0;
        switch (timerN){
            case 1 :
                result = getMsTime(jFormattedTextField1, jSpinner3, jSpinner1);
                break;
            case 2 :
                result = getMsTime(jFormattedTextField3, jSpinner4, jSpinner2);
                break;
                
        }
        return result;
    }
    
    private void setMsTime(JFormattedTextField jHours, JSpinner jMinuts, JSpinner jSeconds, int msTimeLeft){
        int hours = (Math.floorDiv((msTimeLeft/1000),60*60));
        jHours.setText(Integer.toString(hours));
        int minutes = Math.floorDiv(msTimeLeft/1000, 60) - hours*60;
        jMinuts.setValue(minutes);
        int sec = msTimeLeft/1000 - minutes*60 - hours*60*60;
        jSeconds.setValue(sec);
    }
    
    private void setTimerMsTime(int timerN, int msDelay){
        switch (timerN){
            case 1 :
                setMsTime(jFormattedTextField1, jSpinner3, jSpinner1, msDelay);
                break;
            case 2 :
                setMsTime(jFormattedTextField3, jSpinner4, jSpinner2,msDelay);
                break;
                
        }
    }
    
    private int prolongTimer(int timerN){
        Object options[] = {"на 5 минут", "на 10 минут", "нет"};
        String timerText = "";
        if(timerN == 1) timerText = jToggleButton1.getText();
        if(timerN == 2) timerText = jToggleButton2.getText();
        String question = "Продлить таймер "+timerText+" ?";
        int chosen = JOptionPane.showOptionDialog(this, question, "Продление таймера", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
        int msDelay = 0;
        switch (chosen){
            case 0:
                msDelay = 5*60*1000;
                break;
            case 1:
                msDelay = 10*60*1000;
                break;
            case 2:
                msDelay = 0;
                break;
        }
        setTimerMsTime(timerN,msDelay);
        return msDelay;
    }
          
    ActionListener taskPerformer = new ActionListener(){
        //int i=0;
        public void actionPerformed(ActionEvent ev){
            long currT = System.currentTimeMillis();
            //if ((System.currentTimeMillis() - (msStartTime))> msDeltaT){
            
            if( currT >= (msStartTime+msDeltaT)){
                gTimer.stop();
                //jLabel1.setText("End");
                setAlwaysOnTop(true);
                setState(JFrame.NORMAL);
                requestFocus();
                //setAlwaysOnTop(false);
                switch (chosenButton){
                    case 1:
                        jToggleButton1.setSelected(false);
                        msDeltaT = prolongTimer(1);
                        if ( msDeltaT != 0){
                            msStartTime = System.currentTimeMillis();
                            setTimerMsTime(chosenButton,(int) msDeltaT);
                            jToggleButton1.setSelected(true);
                        }
                        break;
                    case 2:
                        jToggleButton2.setSelected(false);
                        msDeltaT = prolongTimer(2);
                        if ( msDeltaT != 0){
                            msStartTime = System.currentTimeMillis();
                            setTimerMsTime(chosenButton,(int) msDeltaT);
                            jToggleButton2.setSelected(true);
                        }
                        break;
                }
                setAlwaysOnTop(false);
            }
            else{
                
                setTimerMsTime(chosenButton,(int) ((msStartTime+msDeltaT)-currT));
                switch (chosenButton){
                    case 1:
                        //setMsTime(jFormattedTextField1, jSpinner3, jSpinner1,(int) ((msStartTime+msDeltaT)-currT) );
                        jToggleButton2.setSelected(false);
                        break;
                    case 2:
                        jToggleButton1.setSelected(false);
                        //setMsTime(jFormattedTextField3, jSpinner4, jSpinner2,(int) ((msStartTime+msDeltaT)-currT) );
                        break;
                }
            }
        }
    };
     
    private void saveData(int lastOrUser){
        FileOutputStream fos;
        try {
            switch (lastOrUser){
                case 0:
                    fos = new FileOutputStream("dataLast.dat");
                    break;
                case 1:
                    fos = new FileOutputStream("dataUser.dat");
                    break;
                default:
                    fos = new FileOutputStream("dataLast.dat");
            }
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            data.setData(jToggleButton1.getText(), jToggleButton2.getText(),(long) getTimerMsTime(1), (long) getTimerMsTime(2));
            oos.writeObject(data);
            oos.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GuzTimer2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GuzTimer2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void readData(int lastOrUser){
        FileInputStream fis;
        try {
            switch (lastOrUser){
                case 0:
                    fis = new FileInputStream("dataLast.dat");
                    break;
                case 1:
                    fis = new FileInputStream("dataUser.dat");
                    break;
                default:
                    fis = new FileInputStream("dataLast.dat");
            }
            ObjectInputStream ois = new ObjectInputStream(fis);
            data = (Data) ois.readObject();
            fis.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GuzTimer2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GuzTimer2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GuzTimer2.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void initializeData(){
        jToggleButton1.setText(data.getDataLeftTimerName());
        jToggleButton2.setText(data.getDataRightTimerName());
        setTimerMsTime(1,(int) data.getDataLeftTimerTimeLeft());
        setTimerMsTime(2,(int) data.getDataRightTimerTimeLeft());
    }
            
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuzTimer2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuzTimer2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuzTimer2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuzTimer2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuzTimer2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JFormattedTextField jFormattedTextField3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JSpinner jSpinner4;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    // End of variables declaration//GEN-END:variables
    private Timer gTimer = new Timer(250,taskPerformer);;
    private long msDeltaT, msStartTime;
    int k=0;
    int chosenButton = 0;
    Data data = new Data();
    //int b2State = 0;
}

class Data implements Serializable{
    private String leftTimerName, rightTimerName;
    private long leftTimerTimeLeft, rightTimerTimeLeft;
    
    Data(String leftTimerName, String rightTimerName,long leftTimerTimeLeft, long rightTimerTimeLeft){
        /*this.leftTimerName = leftTimerName;
        this.rightTimerName = rightTimerName;
        this.leftTimerTimeLeft = leftTimerTimeLeft;
        this.rightTimerTimeLeft = rightTimerTimeLeft;*/
        setData(leftTimerName, rightTimerName, leftTimerTimeLeft, rightTimerTimeLeft);
    }
    
    Data(){
        leftTimerName = "Good";
        rightTimerName = "Rest";
        leftTimerTimeLeft = 5;
        rightTimerTimeLeft = 5;
    }
    
    void setData(String leftTimerName, String rightTimerName,long leftTimerTimeLeft, long rightTimerTimeLeft){
        this.leftTimerName = leftTimerName;
        this.rightTimerName = rightTimerName;
        this.leftTimerTimeLeft = leftTimerTimeLeft;
        this.rightTimerTimeLeft = rightTimerTimeLeft;
    }
    
    String getDataLeftTimerName(){
        return leftTimerName;
    }
    String getDataRightTimerName(){
        return rightTimerName;
    }
    
    long getDataLeftTimerTimeLeft(){
        return leftTimerTimeLeft;
    }
    long getDataRightTimerTimeLeft(){
        return rightTimerTimeLeft;
    }
}
